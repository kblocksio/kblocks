// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`custom template 1`] = `
{
  "README.md": "# Bang Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: custom
  definition:
    outputs:
      - myOutput
    readme: ./README.md
    schema: ./src/values.schema.json
    description: the bang bang description
    group: bang.com
    version: v99
    kind: Bang
    plural: bangs
    icon: ðŸ”¥
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: bang
metadata:
  name: bangs.bang.com
",
  "src/.gitignore": "charts/",
  "src/Chart.yaml": "apiVersion: v2
name: bang-block
description: the bang bang description
type: application
version: 0.1.0

# dependencies:
#   - name: postgresql
#     repository: https://charts.bitnami.com/bitnami
#     version: 15.5.20
",
  "src/create": "#!/usr/bin/env node
const fs = require("fs");

const object = JSON.parse(fs.readFileSync(process.env.KBLOCKS_OBJECT, "utf8"));

console.log("creating resource with value:", object.myValue);

fs.writeFileSync(process.env.KBLOCKS_OUTPUTS, JSON.stringify({
  myOutput: \`create \${object.myValue}\`,
}));
",
  "src/delete": "#!/usr/bin/env node
const fs = require("fs");

const object = JSON.parse(fs.readFileSync(process.env.KBLOCKS_OBJECT, "utf8"));

console.log("deleting resource", object);
",
  "src/update": "#!/usr/bin/env node
const fs = require("fs");

const object = JSON.parse(fs.readFileSync(process.env.KBLOCKS_OBJECT, "utf8"));

console.log("updating resource with value:", object.myValue);

fs.writeFileSync(process.env.KBLOCKS_OUTPUTS, JSON.stringify({
  myOutput: \`update \${object.myValue}\`,
}));
",
  "src/values.schema.json": "{
  "type": "object",
  "required": [],
  "properties": {
    "myValue": {
      "type": "string",
      "description": "An example of an input variable that will be used in the block"
    }
  }
}",
}
`;

exports[`helm template 1`] = `
{
  "README.md": "# Bang Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: helm
  definition:
    outputs:
      - myOutput
    readme: ./README.md
    schema: ./src/values.schema.json
    description: the bang bang description
    group: bang.com
    version: v99
    kind: Bang
    plural: bangs
    icon: ðŸ”¥
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: bang
metadata:
  name: bangs.bang.com
",
  "src/.gitignore": "charts/",
  "src/Chart.yaml": "apiVersion: v2
name: bang-block
description: the bang bang description
type: application
version: 0.1.0

# dependencies:
#   - name: postgresql
#     repository: https://charts.bitnami.com/bitnami
#     version: 15.5.20
",
  "src/templates/NOTES.txt": "{
  "myOutput": "{{ .Release.Name }}-is-the-awesome-output-for-bang"
}",
  "src/values.schema.json": "{
  "type": "object",
  "required": [],
  "properties": {
    "myValue": {
      "type": "string",
      "description": "An example of an input variable that will be used in the block"
    }
  }
}",
}
`;

exports[`noop template 1`] = `
{
  "README.md": "# Secret Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: noop
  definition:
    readme: ./README.md
    schema: ./src/values.schema.json
    description: the bang bang description
    group: core
    version: v1
    kind: Secret
    plural: secrets
    icon: ðŸ”¥
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: secret
  operator:
    skipCrd: true
    flushOnly: true
metadata:
  name: secrets.core
",
  "src/.gitignore": "charts/",
  "src/values.schema.json": "{
  "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
  "type": "object",
  "properties": {
    "data": {
      "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "format": "byte"
      }
    },
    "immutable": {
      "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
      "type": "boolean"
    },
    "stringData": {
      "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "type": {
      "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
      "type": "string"
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "",
      "kind": "Secret",
      "version": "v1"
    }
  ]
}",
}
`;

exports[`terraform template 1`] = `
{
  "README.md": "# Bang Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: tofu
  definition:
    description: the bang bang description
    icon: ðŸ”¥
    readme: ./README.md
    schema: src/values.schema.json
    outputs:
      - myOutput
    group: bang.com
    version: v99
    kind: Bang
    plural: bangs
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: bang
  operator:
    envSecrets:
      AWS_DEFAULT_REGION: aws-credentials
      AWS_ACCESS_KEY_ID: aws-credentials
      AWS_SECRET_ACCESS_KEY: aws-credentials
metadata:
  name: bangs.bang.com
",
  "src/main.tf": "# This is an example of an AWS SNS topic resource which will be created by the block
resource "aws_sns_topic" "my_topic" {
  name = var.myValue
}

# This is an example of an output value that will be returned by the block
output "myOutput" {
  value       = aws_sns_topic.my_topic.arn
  description = "An output value for my block"
}
",
  "src/values.schema.json": "{
  "type": "object",
  "required": [],
  "properties": {
    "myValue": {
      "type": "string",
      "description": "An example of an input variable that will be used in the block"
    }
  }
}",
  "src/variables.tf": "variable "myValue" {
  description = "An example of an input variable that will be used in the block"
  type        = string
  default     = "my-default-value"
}
",
}
`;

exports[`tofu template 1`] = `
{
  "README.md": "# Bang Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: tofu
  definition:
    description: the bang bang description
    icon: ðŸ”¥
    readme: ./README.md
    schema: src/values.schema.json
    outputs:
      - myOutput
    group: bang.com
    version: v99
    kind: Bang
    plural: bangs
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: bang
  operator:
    envSecrets:
      AWS_DEFAULT_REGION: aws-credentials
      AWS_ACCESS_KEY_ID: aws-credentials
      AWS_SECRET_ACCESS_KEY: aws-credentials
metadata:
  name: bangs.bang.com
",
  "src/main.tf": "# This is an example of an AWS SNS topic resource which will be created by the block
resource "aws_sns_topic" "my_topic" {
  name = var.myValue
}

# This is an example of an output value that will be returned by the block
output "myOutput" {
  value       = aws_sns_topic.my_topic.arn
  description = "An output value for my block"
}
",
  "src/values.schema.json": "{
  "type": "object",
  "required": [],
  "properties": {
    "myValue": {
      "type": "string",
      "description": "An example of an input variable that will be used in the block"
    }
  }
}",
  "src/variables.tf": "variable "myValue" {
  description = "An example of an input variable that will be used in the block"
  type        = string
  default     = "my-default-value"
}
",
}
`;

exports[`wing-k8s template 1`] = `
{
  "README.md": "# Bang Block

TODO: Add a description of the block or run \`kb enrich\` to generate one.",
  "kblock.yaml": "apiVersion: kblocks.io/v1
kind: Block
spec:
  engine: wing/k8s
  definition:
    outputs:
      - myOutput
    readme: ./README.md
    schema: ./src/block.w
    description: the bang bang description
    group: bang.com
    version: v99
    kind: Bang
    plural: bangs
    icon: ðŸ”¥
    color: red
    listKind: BangList
    shortNames:
      - b
      - ba
    categories:
      - cat1
      - cat2
    singular: bang
metadata:
  name: bangs.bang.com
",
  "src/block.w": "bring "cdk8s-plus-30" as k8s;

pub struct BangSpec {
  myInput: str;
}

pub class Bang {
  pub myOutput: str;

  new(spec: BangSpec) {

    let configMap = new k8s.ConfigMap(
      data: {
        "my-key": spec.myInput,
      }
    );

    this.myOutput = configMap.name;
  }
}",
  "src/package.json": "{
  "dependencies": {
    "@winglibs/k8s": "^0.0.8",
    "cdk8s-plus-30": "^2.0.6"
  }
}
",
}
`;
